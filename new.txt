i have Backend folder in that i have middleware folder in that i have authMiddleware.js file
const jwt = require('jsonwebtoken');
const User = require('../models/User');

module.exports = async (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) {
    return res.status(401).json({ message: 'No token provided' });
  }
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);
    if (!user) {
      return res.status(401).json({ message: 'User not found' });
    }
    req.user = { id: decoded.userId, userId: decoded.userId, role: decoded.role }; // Ensure consistency
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token' });
  }
};
then i have models folder in that i have CartItem.js file
const mongoose = require('mongoose');

const cartItemSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  menuItemId: { type: mongoose.Schema.Types.ObjectId, ref: 'MenuItem', required: true },
  quantity: { type: Number, required: true, default: 1 },
});

// Add index for faster queries
cartItemSchema.index({ userId: 1, menuItemId: 1 });

module.exports = mongoose.model('CartItem', cartItemSchema);
then i have MenuItem.js file
const mongoose = require('mongoose');

const menuItemSchema = new mongoose.Schema({
  id: { type: String, required: true, unique: true }, // unique: true creates the index
  title: { type: String, required: true },
  paragraph: { type: String, required: true },
  price: { type: Number, required: true, min: 0 },
  rating: { type: Number, required: true, min: 0, max: 5 }, // Added validation
  image: { type: String, required: true },
});

module.exports = mongoose.model('MenuItem', menuItemSchema);
then i have order.js file
const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  items: [{
    menuItemId: { type: mongoose.Schema.Types.ObjectId, ref: 'MenuItem', required: true },
    quantity: { type: Number, required: true },
  }],
  totalAmount: { type: Number, required: true },
  paymentId: { type: String, required: true },
  orderId: { type: String, required: true },
  currency: { type: String, required: true },
  status: { type: String, enum: ['pending', 'completed', 'failed', 'cancelled'], default: 'pending' },
  createdAt: { type: Date, default: Date.now },
});

// Add indexes for faster queries
orderSchema.index({ userId: 1 });
orderSchema.index({ 'items.menuItemId': 1 });

module.exports = mongoose.model('Order', orderSchema);
then i have User.js file
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true }, // unique: true creates the index
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
  createdAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('User', userSchema);
then i have routes folder in that i have auth.js file
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const User = require('../models/User');
const rateLimit = require('express-rate-limit');
const authMiddleware = require('../middleware/authMiddleware'); // Import from authMiddleware.js

// Rate limiter for auth routes
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5,
  message: 'Too many attempts, please try again later.',
});

// Middleware to check if user is admin
const adminMiddleware = (req, res, next) => {
  if (!req.user || req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Admin access required' });
  }
  next();
};

// Signup route
router.post(
  '/signup',
  authLimiter,
  [
    body('name').notEmpty().withMessage('Name is required'),
    body('email').isEmail().withMessage('Invalid email'),
    body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { name, email, password } = req.body;
    try {
      let user = await User.findOne({ email });
      if (user) {
        return res.status(400).json({ message: 'User already exists' });
      }
      user = new User({
        name,
        email,
        password,
        role: 'user',
      });
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
      await user.save();
      const payload = {
        userId: user._id,
        role: user.role,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.status(201).json({ token, userId: user._id });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
);

// Login route
router.post(
  '/login',
  authLimiter,
  [
    body('email').isEmail().withMessage('Invalid email'),
    body('password').notEmpty().withMessage('Password is required'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { email, password } = req.body;
    try {
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      const payload = {
        userId: user._id,
        role: user.role,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token, userId: user._id });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
);

// Admin login route
router.post(
  '/admin-login',
  authLimiter,
  [
    body('email').isEmail().withMessage('Invalid email'),
    body('password').notEmpty().withMessage('Password is required'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { email, password } = req.body;
    try {
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      if (user.role !== 'admin') {
        return res.status(403).json({ message: 'Admin access required' });
      }
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      const payload = {
        userId: user._id,
        role: user.role,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token, userId: user._id });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
);

// Get user profile
router.get('/profile', authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Debug exports
console.log('Exported from auth.js:', { router, authMiddleware, adminMiddleware });

// Export router and middlewares
module.exports = { router, authMiddleware, adminMiddleware };
then i have cart.js file
const express = require('express');
const router = express.Router();
const { body, param, validationResult } = require('express-validator');
const authMiddleware = require('../middleware/authMiddleware'); // Updated import
const CartItem = require('../models/CartItem');
const MenuItem = require('../models/MenuItem');

// Get cart items for a user
router.get('/', authMiddleware, async (req, res) => {
  try {
    console.log('Cart GET - User:', req.user);
    const items = await CartItem.find({ userId: req.user.userId }).populate('menuItemId');
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: `Failed to fetch cart items: ${error.message}` });
  }
});

// Add item to cart
router.post(
  '/',
  authMiddleware,
  [
    body('menuItemId').notEmpty().withMessage('Menu item ID is required'),
    body('quantity').isInt({ min: 1 }).withMessage('Quantity must be at least 1'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { menuItemId, quantity } = req.body;
    try {
      console.log('Adding to cart:', { menuItemId, quantity, userId: req.user.userId }); // Added logging
      const menuItem = await MenuItem.findOne({ id: menuItemId }); // Use custom id
      if (!menuItem) {
        console.log('Menu item not found for id:', menuItemId); // Added logging
        return res.status(404).json({ message: 'Menu item not found' });
      }
      const existingItem = await CartItem.findOne({ userId: req.user.userId, menuItemId: menuItem._id });
      if (existingItem) {
        existingItem.quantity += quantity;
        const updatedItem = await existingItem.save();
        const populatedItem = await CartItem.findById(updatedItem._id).populate('menuItemId');
        res.json(populatedItem);
      } else {
        const cartItem = new CartItem({ userId: req.user.userId, menuItemId: menuItem._id, quantity });
        const newItem = await cartItem.save();
        const populatedItem = await CartItem.findById(newItem._id).populate('menuItemId');
        res.status(201).json(populatedItem);
      }
    } catch (error) {
      console.error('Error adding item to cart:', error);
      res.status(400).json({ message: `Failed to add item to cart: ${error.message}` });
    }
  }
);

// Update item quantity
router.put(
  '/:id',
  authMiddleware,
  [
    param('id').notEmpty().withMessage('Menu item ID is required'),
    body('quantity').isInt({ min: 0 }).withMessage('Quantity must be non-negative'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { quantity } = req.body;
    const menuItemId = req.params.id;
    try {
      const menuItem = await MenuItem.findOne({ id: menuItemId }); // Use custom id
      if (!menuItem) {
        return res.status(404).json({ message: 'Menu item not found' });
      }
      const item = await CartItem.findOne({ userId: req.user.userId, menuItemId: menuItem._id }).populate('menuItemId');
      if (!item) {
        return res.status(404).json({ message: 'Item not found in cart' });
      }
      if (quantity < 1) {
        await CartItem.deleteOne({ _id: item._id });
        res.json({ message: 'Item removed from cart' });
      } else {
        item.quantity = quantity;
        const updatedItem = await item.save();
        const populatedItem = await CartItem.findById(updatedItem._id).populate('menuItemId');
        res.json(populatedItem);
      }
    } catch (error) {
      res.status(400).json({ message: `Failed to update cart item: ${error.message}` });
    }
  }
);

// Remove item from cart
router.delete(
  '/:id',
  authMiddleware,
  [param('id').notEmpty().withMessage('Menu item ID is required')],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const menuItemId = req.params.id;
    try {
      const menuItem = await MenuItem.findOne({ id: menuItemId }); // Use custom id
      if (!menuItem) {
        return res.status(404).json({ message: 'Menu item not found' });
      }
      const item = await CartItem.findOneAndDelete({ userId: req.user.userId, menuItemId: menuItem._id });
      if (!item) {
        return res.status(404).json({ message: 'Item not found in cart' });
      }
      res.json({ message: 'Item removed from cart' });
    } catch (error) {
      res.status(500).json({ message: `Failed to remove cart item: ${error.message}` });
    }
  }
);

// Clear cart
router.delete('/clear', authMiddleware, async (req, res) => {
  try {
    await CartItem.deleteMany({ userId: req.user.userId });
    res.json({ message: 'Cart cleared successfully' });
  } catch (error) {
    res.status(500).json({ message: `Failed to clear cart: ${error.message}` });
  }
});

module.exports = router;
then i have menu.js file
const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');
const MenuItem = require('../models/MenuItem');
const authMiddleware = require('../middleware/authMiddleware'); // Updated import
const { adminMiddleware } = require('./auth');

// Debug log to verify middleware imports
console.log('Imported middlewares in menu.js:', { authMiddleware, adminMiddleware });

// Get all menu items
router.get('/', async (req, res) => {
  try {
    const items = await MenuItem.find();
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: `Failed to fetch menu items: ${error.message}` });
  }
});

// Add menu item (admin only)
router.post(
  '/',
  authMiddleware,
  adminMiddleware,
  [
    body('id')
      .notEmpty()
      .withMessage('ID is required')
      .custom(async (value) => {
        const existingItem = await MenuItem.findOne({ id: value });
        if (existingItem) {
          throw new Error('Menu item ID already exists');
        }
        return true;
      }),
    body('title').notEmpty().withMessage('Title is required'),
    body('paragraph').notEmpty().withMessage('Description is required'),
    body('price').isFloat({ min: 0 }).withMessage('Price must be non-negative'),
    body('rating').isFloat({ min: 0, max: 5 }).withMessage('Rating must be between 0 and 5'),
    body('image').isURL().withMessage('Invalid image URL'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    try {
      const menuItem = new MenuItem(req.body);
      const savedItem = await menuItem.save();
      res.status(201).json(savedItem);
    } catch (error) {
      res.status(400).json({ message: `Failed to create menu item: ${error.message}` });
    }
  }
);

module.exports = router;
then i have order.js file
const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');
const authMiddleware = require('../middleware/authMiddleware');
const CartItem = require('../models/CartItem');
const Order = require('../models/order'); // Fixed: Use uppercase 'Order'
const MenuItem = require('../models/MenuItem');

router.post(
  '/order',
  authMiddleware,
  [
    body('items').isArray().withMessage('Items must be an array'),
    body('items.*.menuItemId').notEmpty().withMessage('Menu item ID is required'),
    body('items.*.quantity').isInt({ min: 1 }).withMessage('Quantity must be at least 1'),
    body('paymentId').notEmpty().withMessage('Payment ID is required'),
    body('orderId').notEmpty().withMessage('Order ID is required'),
    body('currency').notEmpty().withMessage('Currency is required'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { items, paymentId, orderId, currency } = req.body;
    try {
      let totalAmount = 0;
      const orderItems = [];
      for (const item of items) {
        const menuItem = await MenuItem.findOne({ id: item.menuItemId });
        if (!menuItem) {
          return res.status(404).json({ message: `Menu item not found: ${item.menuItemId}` });
        }
        totalAmount += item.quantity * menuItem.price;
        orderItems.push({ menuItemId: menuItem._id, quantity: item.quantity });
      }
      const order = new Order({ // Fixed: Use uppercase 'Order'
        userId: req.user.userId,
        items: orderItems,
        totalAmount,
        paymentId,
        orderId,
        currency,
        status: 'pending',
      });
      await order.save();
      await CartItem.deleteMany({ userId: req.user.userId });
      res.status(201).json(order);
    } catch (error) {
      console.error('Error creating order:', error);
      res.status(500).json({ message: `Failed to create order: ${error.message}` });
    }
  }
);

router.get('/orders', authMiddleware, async (req, res) => {
  try {
    const orders = await Order.find({ userId: req.user.userId }).populate('items.menuItemId');
    res.json(orders);
  } catch (error) {
    console.error('Error fetching orders:', error);
    res.status(500).json({ message: `Failed to fetch orders: ${error.message}` });
  }
});

module.exports = router;
then i have razorpay.js file
require('dotenv').config({ path: require('path').join(__dirname, '..', '.env') });
const express = require('express');
const router = express.Router();
const Razorpay = require('razorpay');
const { body, validationResult } = require('express-validator');
const authMiddleware = require('../middleware/authMiddleware');
const crypto = require('crypto');

// Debugging environment variables
console.log('[Debug] Current environment variables:', {
  RAZORPAY_KEY_ID: process.env.RAZORPAY_KEY_ID ? '***exists***' : 'MISSING',
  RAZORPAY_KEY_SECRET: process.env.RAZORPAY_KEY_SECRET ? '***exists***' : 'MISSING',
  NODE_ENV: process.env.NODE_ENV || 'development'
});

// Validate environment variables
if (!process.env.RAZORPAY_KEY_ID || !process.env.RAZORPAY_KEY_SECRET) {
  const errorMsg = 'Razorpay configuration is incomplete. Please check .env file';
  console.error('[Critical]', errorMsg);
  throw new Error(errorMsg);
}

// Initialize Razorpay with enhanced configuration
const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_KEY_SECRET
});

console.log('[Info] Razorpay client initialized with key:', process.env.RAZORPAY_KEY_ID);

/**
 * @route POST /create-order
 * @description Create a Razorpay order
 * @access Private
 */
router.post(
  '/create-order',
  authMiddleware,
  [
    body('amount').isInt({ min: 1 }).withMessage('Amount must be at least 1 INR'),
    body('currency').isIn(['INR']).withMessage('Only INR currency supported')
  ],
  async (req, res) => {
    // Validate request body
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { amount, currency, receipt_note } = req.body;
    
    try {
      const options = {
        amount: amount * 100, // Convert to paise
        currency: currency || 'INR',
        receipt: receipt_note || `order_${Date.now()}`,
        payment_capture: 1 // Auto-capture payment
      };

      console.log('[Debug] Creating order with options:', options);
      
      const order = await razorpay.orders.create(options);
      
      console.log('[Success] Order created:', order.id);
      
      res.json({
        success: true,
        order: {
          id: order.id,
          amount: order.amount,
          currency: order.currency,
          receipt: order.receipt,
          status: order.status
        }
      });

    } catch (error) {
      console.error('[Error] Order creation failed:', {
        error: error.error?.description || error.message,
        statusCode: error.statusCode,
        request: error.error?.metadata?.order_request
      });
      
      res.status(error.statusCode || 500).json({
        success: false,
        message: 'Order creation failed',
        error: error.error?.description || error.message
      });
    }
  }
);

/**
 * @route POST /verify-payment
 * @description Verify Razorpay payment signature
 * @access Private
 */
router.post(
  '/verify-payment',
  authMiddleware,
  [
    body('razorpay_order_id').notEmpty().withMessage('Order ID required'),
    body('razorpay_payment_id').notEmpty().withMessage('Payment ID required'),
    body('razorpay_signature').notEmpty().withMessage('Signature required')
  ],
  async (req, res) => {
    // Validate request body
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { razorpay_order_id, razorpay_payment_id, razorpay_signature } = req.body;
    
    try {
      // Generate expected signature
      const expectedSignature = crypto
        .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)
        .update(`${razorpay_order_id}|${razorpay_payment_id}`)
        .digest('hex');

      console.log('[Debug] Signature verification:', {
        received: razorpay_signature,
        generated: expectedSignature
      });

      // Verify signature
      if (expectedSignature !== razorpay_signature) {
        console.warn('[Warning] Signature mismatch for order:', razorpay_order_id);
        return res.status(400).json({
          success: false,
          message: 'Invalid payment signature'
        });
      }

      console.log('[Success] Payment verified for order:', razorpay_order_id);
      
      res.json({
        success: true,
        paymentId: razorpay_payment_id,
        orderId: razorpay_order_id,
        message: 'Payment verified successfully'
      });

    } catch (error) {
      console.error('[Error] Payment verification failed:', error.message);
      res.status(500).json({
        success: false,
        message: 'Payment verification failed',
        error: error.message
      });
    }
  }
);

// Additional debug endpoint
router.get('/config-check', (req, res) => {
  res.json({
    razorpay_configured: !!process.env.RAZORPAY_KEY_ID,
    node_env: process.env.NODE_ENV || 'development',
    server_time: new Date().toISOString()
  });
});

module.exports = router;
then i have .env file
MONGODB_URI=mongodb+srv://New:New%4023@cluster1.chylhpo.mongodb.net/tasty_burger?retryWrites=true&w=majority
PORT=5000
RAZORPAY_KEY_ID=rzp_test_UiTkSmK6mjclhU
RAZORPAY_KEY_SECRET=IANiniLncZfln7WWjWbr6mbx
CLOUDINARY_CLOUD_NAME=dugh8szaj
CLOUDINARY_API_KEY=659382545759118
CLOUDINARY_API_SECRET=LjRo7ZgTpOaAEWossDy8paLzyTw
JWT_SECRET=1d311174c6ca418e2d4e0ec404696f0ec38fbdcc8ec6688c9c943a52872d73ba
then i have seedMenu.js file
require('dotenv').config();
const mongoose = require('mongoose');
const MenuItem = require('./models/MenuItem');

mongoose.connect(process.env.MONGODB_URI, {
  serverSelectionTimeoutMS: 5000,
  maxPoolSize: 10,
}).then(() => console.log('Connected to MongoDB'));

const menuItems = [
  {
    id: '0001',
    title: 'Crispy Chicken',
    paragraph: 'Chicken breast, chilli sauce, tomatoes, pickles, coleslaw',
    price: 99,
    rating: 5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849974/menu/burger-11`,
  },
  {
    id: '0002',
    title: 'Ultimate Bacon',
    paragraph: 'House patty, cheddar cheese, bacon, onion, mustard',
    price: 199,
    rating: 4.5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849975/menu/burger-12`,
  },
  {
    id: '0003',
    title: 'Black Sheep',
    paragraph: 'American cheese, tomato relish, avocado, lettuce, red onion',
    price: 149,
    rating: 4,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849977/menu/burger-13`,
  },
  {
    id: '0004',
    title: 'Vegan Burger',
    paragraph: 'House patty, cheddar cheese, bacon, onion, mustard',
    price: 179,
    rating: 3.5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849978/menu/burger-14`,
  },
  {
    id: '0005',
    title: 'Double Burger',
    paragraph: '2 patties, cheddar cheese, mustard, pickles, tomatoes',
    price: 79,
    rating: 3.0,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849979/menu/burger-15`,
  },
  {
    id: '0006',
    title: 'Turkey Burger',
    paragraph: 'Turkey, cheddar cheese, onion, lettuce, tomatoes, pickles',
    price: 99,
    rating: 3,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849981/menu/burger-16`,
  },
  {
    id: '0007',
    title: 'Smokey House',
    paragraph: 'patty, cheddar cheese, onion, lettuce, tomatoes, pickles',
    price: 199,
    rating: 2.5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849982/menu/burger-17`,
  },
  {
    id: '0008',
    title: 'Classic Burger',
    paragraph: 'cheddar cheese, ketchup, mustard, pickles, onion',
    price: 149,
    rating: 2.0,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849983/menu/burger-18`,
  },
];

async function seed() {
  try {
    await MenuItem.deleteMany({});
    await MenuItem.insertMany(menuItems);
    console.log('Menu items seeded successfully');
    mongoose.connection.close();
  } catch (error) {
    console.error('Error seeding menu items:', error);
    mongoose.connection.close();
  }
}

seed();
then i have server.js file
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const morgan = require('morgan');
const fs = require('fs');
const path = require('path');
const dotenv = require('dotenv');
const authRoutes = require('./routes/auth');
const menuRoutes = require('./routes/menu');
const cartRoutes = require('./routes/cart');
const orderRoutes = require('./routes/order'); 
const razorpayRoutes = require('./routes/razorpay');

// Load environment variables
const envPath = path.join(__dirname, '.env');
console.log('Attempting to load .env file from:', envPath);
if (!fs.existsSync(envPath)) {
  console.error('Error: .env file not found at', envPath);
  process.exit(1);
}
const dotenvResult = dotenv.config({ path: envPath });
if (dotenvResult.error) {
  console.error('Error loading .env file:', dotenvResult.error);
  process.exit(1);
}

// Debug: Log environment variables to verify
console.log('Environment Variables Loaded:', {
  RAZORPAY_KEY_ID: process.env.RAZORPAY_KEY_ID,
  RAZORPAY_KEY_SECRET: process.env.RAZORPAY_KEY_SECRET ? '[REDACTED]' : undefined,
  MONGODB_URI: process.env.MONGODB_URI ? '[REDACTED]' : undefined,
  JWT_SECRET: process.env.JWT_SECRET ? '[REDACTED]' : undefined,
  CLOUDINARY_CLOUD_NAME: process.env.CLOUDINARY_CLOUD_NAME ? '[REDACTED]' : undefined,
  CLOUDINARY_API_KEY: process.env.CLOUDINARY_API_KEY ? '[REDACTED]' : undefined,
  CLOUDINARY_API_SECRET: process.env.CLOUDINARY_API_SECRET ? '[REDACTED]' : undefined,
});

// Initialize Express app
const app = express();

// Middleware
app.use(cors({
  origin: ['http://localhost:3000', 'https://food-kohl-theta.vercel.app/'],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));
app.use(express.json());
app.use(morgan('combined', {
  stream: fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })
}));
app.use(morgan('combined'));

// Root route
app.get('/', (req, res) => {
  res.json({ message: 'Welcome to Tasty Burger API' });
});

// Routes
app.use('/api/auth', authRoutes.router);
app.use('/api/menu', menuRoutes);
app.use('/api/cart', cartRoutes);
app.use('/api', orderRoutes);
app.use('/api', razorpayRoutes);

// Connect to MongoDB
mongoose.connect(process.env.MONGODB_URI)
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.error('MongoDB connection error:', err));

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
then i have uploadImages.js file
