i have backend folder in that i have middleware folder in that i have authMiddleware.js file
const jwt = require('jsonwebtoken');
const User = require('../models/User');

module.exports = async (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) {
    return res.status(401).json({ message: 'No token provided' });
  }
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.userId);
    if (!user) {
      return res.status(401).json({ message: 'User not found' });
    }
    req.user = { id: decoded.userId, userId: decoded.userId, role: decoded.role }; // Ensure consistency
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token' });
  }
};
then i have models folder in that i have CartItem.js file
const mongoose = require('mongoose');

const cartItemSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  menuItemId: { type: mongoose.Schema.Types.ObjectId, ref: 'MenuItem', required: true },
  quantity: { type: Number, required: true, default: 1 },
});

// Add index for faster queries
cartItemSchema.index({ userId: 1, menuItemId: 1 });

module.exports = mongoose.model('CartItem', cartItemSchema);
then i have MenuItem.js file
const mongoose = require('mongoose');

const menuItemSchema = new mongoose.Schema({
  id: { type: String, required: true, unique: true },
  title: { type: String, required: true },
  paragraph: { type: String, required: true },
  price: { type: Number, required: true },
  rating: { type: Number, required: true },
  image: { type: String, required: true },
});

// Add index for faster queries
menuItemSchema.index({ id: 1 });

module.exports = mongoose.model('MenuItem', menuItemSchema);
then i have Order.js file
const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  items: [{
    menuItemId: { type: mongoose.Schema.Types.ObjectId, ref: 'MenuItem', required: true },
    quantity: { type: Number, required: true },
  }],
  totalAmount: { type: Number, required: true },
  paymentId: { type: String, required: true },
  orderId: { type: String, required: true },
  currency: { type: String, required: true },
  status: { type: String, enum: ['pending', 'completed', 'failed', 'cancelled'], default: 'pending' },
  createdAt: { type: Date, default: Date.now },
});

// Add index for faster queries
orderSchema.index({ userId: 1 });

module.exports = mongoose.model('Order', orderSchema);
then i have User.js file
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true },
  role: { type: String, enum: ['user', 'admin'], default: 'user' },
  createdAt: { type: Date, default: Date.now },
});

// Add index for faster queries
userSchema.index({ email: 1 });

module.exports = mongoose.model('User', userSchema);
then i have routes folder in that i have auth.js file
const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { body, validationResult } = require('express-validator');
const User = require('../models/User');
const rateLimit = require('express-rate-limit');

// Rate limiter for auth routes
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5,
  message: 'Too many attempts, please try again later.',
});

// Middleware to verify JWT
const authMiddleware = (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) {
    return res.status(401).json({ message: 'No token, authorization denied' });
  }
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Invalid token' });
  }
};

// Middleware to check if user is admin
const adminMiddleware = (req, res, next) => {
  if (!req.user || req.user.role !== 'admin') {
    return res.status(403).json({ message: 'Admin access required' });
  }
  next();
};

// Signup route
router.post(
  '/signup',
  authLimiter,
  [
    body('name').notEmpty().withMessage('Name is required'),
    body('email').isEmail().withMessage('Invalid email'),
    body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { name, email, password } = req.body;
    try {
      let user = await User.findOne({ email });
      if (user) {
        return res.status(400).json({ message: 'User already exists' });
      }
      user = new User({
        name,
        email,
        password,
        role: 'user',
      });
      const salt = await bcrypt.genSalt(10);
      user.password = await bcrypt.hash(password, salt);
      await user.save();
      const payload = {
        userId: user._id,
        role: user.role,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.status(201).json({ token, userId: user._id });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
);

// Login route
router.post(
  '/login',
  authLimiter,
  [
    body('email').isEmail().withMessage('Invalid email'),
    body('password').notEmpty().withMessage('Password is required'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { email, password } = req.body;
    try {
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      const payload = {
        userId: user._id,
        role: user.role,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token, userId: user._id });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
);

// Admin login route
router.post(
  '/admin-login',
  authLimiter,
  [
    body('email').isEmail().withMessage('Invalid email'),
    body('password').notEmpty().withMessage('Password is required'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { email, password } = req.body;
    try {
      const user = await User.findOne({ email });
      if (!user) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      if (user.role !== 'admin') {
        return res.status(403).json({ message: 'Admin access required' });
      }
      const isMatch = await bcrypt.compare(password, user.password);
      if (!isMatch) {
        return res.status(400).json({ message: 'Invalid credentials' });
      }
      const payload = {
        userId: user._id,
        role: user.role,
      };
      const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });
      res.json({ token, userId: user._id });
    } catch (error) {
      res.status(500).json({ message: error.message });
    }
  }
);

// Get user profile
router.get('/profile', authMiddleware, async (req, res) => {
  try {
    const user = await User.findById(req.user.userId).select('-password');
    if (!user) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.json(user);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Debug exports
console.log('Exported from auth.js:', { router, authMiddleware, adminMiddleware });

// Export router and middlewares
module.exports = { router, authMiddleware, adminMiddleware };
then i have cart.js file
const express = require('express');
const router = express.Router();
const { body, param, validationResult } = require('express-validator');
const authMiddleware = require('./auth').authMiddleware;
const CartItem = require('../models/CartItem');
const MenuItem = require('../models/MenuItem');

// Get cart items for a user
router.get('/', authMiddleware, async (req, res) => {
  try {
    console.log('Cart GET - User:', req.user);
    const items = await CartItem.find({ userId: req.user.userId }).populate('menuItemId');
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: `Failed to fetch cart items: ${error.message}` });
  }
});

// Add item to cart
router.post(
  '/',
  authMiddleware,
  [
    body('menuItemId').notEmpty().withMessage('Menu item ID is required'),
    body('quantity').isInt({ min: 1 }).withMessage('Quantity must be at least 1'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { menuItemId, quantity } = req.body;
    try {
      const menuItem = await MenuItem.findOne({ id: menuItemId }); // Use custom id
      if (!menuItem) {
        return res.status(404).json({ message: 'Menu item not found' });
      }
      const existingItem = await CartItem.findOne({ userId: req.user.userId, menuItemId: menuItem._id });
      if (existingItem) {
        existingItem.quantity += quantity;
        const updatedItem = await existingItem.save();
        const populatedItem = await CartItem.findById(updatedItem._id).populate('menuItemId');
        res.json(populatedItem);
      } else {
        const cartItem = new CartItem({ userId: req.user.userId, menuItemId: menuItem._id, quantity });
        const newItem = await cartItem.save();
        const populatedItem = await CartItem.findById(newItem._id).populate('menuItemId');
        res.status(201).json(populatedItem);
      }
    } catch (error) {
      console.error('Error adding item to cart:', error);
      res.status(400).json({ message: `Failed to add item to cart: ${error.message}` });
    }
  }
);

// Update item quantity
router.put(
  '/:id',
  authMiddleware,
  [
    param('id').notEmpty().withMessage('Menu item ID is required'),
    body('quantity').isInt({ min: 0 }).withMessage('Quantity must be non-negative'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { quantity } = req.body;
    const menuItemId = req.params.id;
    try {
      const menuItem = await MenuItem.findOne({ id: menuItemId }); // Use custom id
      if (!menuItem) {
        return res.status(404).json({ message: 'Menu item not found' });
      }
      const item = await CartItem.findOne({ userId: req.user.userId, menuItemId: menuItem._id }).populate('menuItemId');
      if (!item) {
        return res.status(404).json({ message: 'Item not found in cart' });
      }
      if (quantity < 1) {
        await CartItem.deleteOne({ _id: item._id });
        res.json({ message: 'Item removed from cart' });
      } else {
        item.quantity = quantity;
        const updatedItem = await item.save();
        const populatedItem = await CartItem.findById(updatedItem._id).populate('menuItemId');
        res.json(populatedItem);
      }
    } catch (error) {
      res.status(400).json({ message: `Failed to update cart item: ${error.message}` });
    }
  }
);

// Remove item from cart
router.delete(
  '/:id',
  authMiddleware,
  [param('id').notEmpty().withMessage('Menu item ID is required')],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const menuItemId = req.params.id;
    try {
      const menuItem = await MenuItem.findOne({ id: menuItemId }); // Use custom id
      if (!menuItem) {
        return res.status(404).json({ message: 'Menu item not found' });
      }
      const item = await CartItem.findOneAndDelete({ userId: req.user.userId, menuItemId: menuItem._id });
      if (!item) {
        return res.status(404).json({ message: 'Item not found in cart' });
      }
      res.json({ message: 'Item removed from cart' });
    } catch (error) {
      res.status(500).json({ message: `Failed to remove cart item: ${error.message}` });
    }
  }
);

// Clear cart
router.delete('/clear', authMiddleware, async (req, res) => {
  try {
    await CartItem.deleteMany({ userId: req.user.userId });
    res.json({ message: 'Cart cleared successfully' });
  } catch (error) {
    res.status(500).json({ message: `Failed to clear cart: ${error.message}` });
  }
});

module.exports = router;
then i have menu.js file
const express = require('express');
const router = express.Router();
const { body, validationResult } = require('express-validator');
const MenuItem = require('../models/MenuItem');
const { authMiddleware, adminMiddleware } = require('./auth');

// Debug log to verify middleware imports
console.log('Imported middlewares in menu.js:', { authMiddleware, adminMiddleware });

// Get all menu items
router.get('/', async (req, res) => {
  try {
    const items = await MenuItem.find();
    res.json(items);
  } catch (error) {
    res.status(500).json({ message: `Failed to fetch menu items: ${error.message}` });
  }
});

// Add menu item (admin only)
router.post(
  '/',
  authMiddleware,
  adminMiddleware,
  [
    body('id')
      .notEmpty()
      .withMessage('ID is required')
      .custom(async (value) => {
        const existingItem = await MenuItem.findOne({ id: value });
        if (existingItem) {
          throw new Error('Menu item ID already exists');
        }
        return true;
      }),
    body('title').notEmpty().withMessage('Title is required'),
    body('paragraph').notEmpty().withMessage('Description is required'),
    body('price').isFloat({ min: 0 }).withMessage('Price must be non-negative'),
    body('rating').isFloat({ min: 0, max: 5 }).withMessage('Rating must be between 0 and 5'),
    body('image').isURL().withMessage('Invalid image URL'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    try {
      const menuItem = new MenuItem(req.body);
      const savedItem = await menuItem.save();
      res.status(201).json(savedItem);
    } catch (error) {
      res.status(400).json({ message: `Failed to create menu item: ${error.message}` });
    }
  }
);

module.exports = router;
then i have .env file
RAZORPAY_KEY_ID=rzp_test_UiTkSmK6mjclhU
RAZORPAY_KEY_SECRET=IANiniLncZfln7WWjWbr6mbx
MONGODB_URI=mongodb+srv://New:New%4023@cluster1.chylhpo.mongodb.net/?retryWrites=true&w=majority&appName=Cluster1
PORT=5000
# Cloudinary configuration
CLOUDINARY_CLOUD_NAME=dugh8szaj
CLOUDINARY_API_KEY=659382545759118
CLOUDINARY_API_SECRET=LjRo7ZgTpOaAEWossDy8paLzyTw
JWT_SECRET=1d311174c6ca418e2d4e0ec404696f0ec38fbdcc8ec6688c9c943a52872d73ba

then i have seedMenu.js file
require('dotenv').config();
const mongoose = require('mongoose');
const MenuItem = require('./models/MenuItem');

mongoose.connect(process.env.MONGODB_URI, {
  serverSelectionTimeoutMS: 5000,
  maxPoolSize: 10,
}).then(() => console.log('Connected to MongoDB'));

const menuItems = [
  {
    id: '0001',
    title: 'Crispy Chicken',
    paragraph: 'Chicken breast, chilli sauce, tomatoes, pickles, coleslaw',
    price: 99,
    rating: 5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849974/menu/burger-11`,
  },
  {
    id: '0002',
    title: 'Ultimate Bacon',
    paragraph: 'House patty, cheddar cheese, bacon, onion, mustard',
    price: 199,
    rating: 4.5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849975/menu/burger-12`,
  },
  {
    id: '0003',
    title: 'Black Sheep',
    paragraph: 'American cheese, tomato relish, avocado, lettuce, red onion',
    price: 149,
    rating: 4,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849977/menu/burger-13`,
  },
  {
    id: '0004',
    title: 'Vegan Burger',
    paragraph: 'House patty, cheddar cheese, bacon, onion, mustard',
    price: 179,
    rating: 3.5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849978/menu/burger-14`,
  },
  {
    id: '0005',
    title: 'Double Burger',
    paragraph: '2 patties, cheddar cheese, mustard, pickles, tomatoes',
    price: 79,
    rating: 3.0,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849979/menu/burger-15`,
  },
  {
    id: '0006',
    title: 'Turkey Burger',
    paragraph: 'Turkey, cheddar cheese, onion, lettuce, tomatoes, pickles',
    price: 99,
    rating: 3,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849981/menu/burger-16`,
  },
  {
    id: '0007',
    title: 'Smokey House',
    paragraph: 'patty, cheddar cheese, onion, lettuce, tomatoes, pickles',
    price: 199,
    rating: 2.5,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849982/menu/burger-17`,
  },
  {
    id: '0008',
    title: 'Classic Burger',
    paragraph: 'cheddar cheese, ketchup, mustard, pickles, onion',
    price: 149,
    rating: 2.0,
    image: `http://res.cloudinary.com/${process.env.CLOUDINARY_CLOUD_NAME}/image/upload/v1750849983/menu/burger-18`,
  },
];

async function seed() {
  try {
    await MenuItem.deleteMany({});
    await MenuItem.insertMany(menuItems);
    console.log('Menu items seeded successfully');
    mongoose.connection.close();
  } catch (error) {
    console.error('Error seeding menu items:', error);
    mongoose.connection.close();
  }
}

seed();
then i have server.js file
const express = require('express');
const cors = require('cors');
const Razorpay = require('razorpay');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const { body, validationResult } = require('express-validator');
const rateLimit = require('express-rate-limit');
const winston = require('winston');
const menuRoutes = require('./routes/menu');
const cartRoutes = require('./routes/cart');
const { router: authRoutes, authMiddleware } = require('./routes/auth');
const Order = require('./models/Order');
const MenuItem = require('./models/MenuItem');

dotenv.config();

// Validate environment variables
const requiredEnv = ['MONGODB_URI', 'PORT', 'RAZORPAY_KEY_ID', 'RAZORPAY_KEY_SECRET', 'JWT_SECRET', 'CLOUDINARY_CLOUD_NAME', 'CLOUDINARY_API_KEY', 'CLOUDINARY_API_SECRET'];
requiredEnv.forEach(key => {
  if (!process.env[key]) {
    console.error(`Missing environment variable: ${key}`);
    process.exit(1);
  }
});

// Logger setup
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.json(),
    winston.format.metadata(),
    winston.format.printf(({ timestamp, level, message, metadata }) => {
      return `${timestamp} [${level.toUpperCase()}] ${message} ${Object.keys(metadata).length ? JSON.stringify(metadata) : ''}`;
    })
  ),
  transports: [
    new winston.transports.File({ filename: 'error.log', level: 'error' }),
    new winston.transports.File({ filename: 'combined.log' }),
  ],
});
if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({ format: winston.format.simple() }));
}

const app = express();
app.use(cors({
  origin: ['http://localhost:3000'],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
  allowedHeaders: ['Content-Type', 'Authorization'],
}));
app.use(express.json());

// Request logging middleware
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.url}`, { ip: req.ip });
  next();
});

// Connect to MongoDB
mongoose
  .connect(process.env.MONGODB_URI, {
    serverSelectionTimeoutMS: 5000,
    maxPoolSize: 10,
  })
  .then(() => logger.info('Connected to MongoDB'))
  .catch(error => {
    logger.error('MongoDB connection error:', { error: error.message });
    process.exit(1);
  });

// Razorpay instance
const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_KEY_SECRET,
});

// Rate limiter for Razorpay key endpoint
const razorpayKeyLimiter = rateLimit({
  windowMs: 15 * 60 * 1000,
  max: 100,
  message: 'Too many requests for Razorpay key, please try again later.',
});

// Get user orders
app.get('/api/orders', authMiddleware, async (req, res) => {
  try {
    const orders = await Order.find({ userId: req.user.userId }).populate('items.menuItemId');
    res.json(
      orders.map(order => ({
        id: order._id,
        items: order.items.map(item => ({
          menuItem: {
            id: item.menuItemId.id,
            title: item.menuItemId.title,
            paragraph: item.menuItemId.paragraph,
            price: item.menuItemId.price,
            rating: item.menuItemId.rating,
            image: item.menuItemId.image,
          },
          quantity: item.quantity,
        })),
        totalAmount: order.totalAmount,
        paymentId: order.paymentId,
        orderId: order.orderId,
        currency: order.currency,
        status: order.status,
        createdAt: order.createdAt,
      }))
    );
  } catch (error) {
    logger.error('Failed to fetch orders:', { error: error.message, userId: req.user.userId });
    res.status(500).json({ message: `Failed to fetch orders: ${error.message}` });
  }
});

// Create order endpoint
app.post(
  '/api/create-order',
  authMiddleware,
  [
    body('amount').isInt({ min: 100 }).withMessage('Amount must be at least 100 paise'),
    body('currency').isIn(['INR']).withMessage('Currency must be INR'),
    body('receipt').notEmpty().withMessage('Receipt is required'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { amount, currency, receipt } = req.body;
    try {
      const order = await razorpay.orders.create({ amount, currency, receipt });
      logger.info('Order created', { orderId: order.id, userId: req.user.userId });
      res.json(order);
    } catch (error) {
      logger.error('Failed to create order:', { error: error.message, userId: req.user.userId });
      res.status(500).json({ error: `Failed to create order: ${error.message}` });
    }
  }
);

// Save order after payment
app.post(
  '/api/save-order',
  authMiddleware,
  [
    body('items').isArray({ min: 1 }).withMessage('Items array cannot be empty'),
    body('items.*.menuItemId').isMongoId().withMessage('Invalid menu item ID'),
    body('items.*.quantity').isInt({ min: 1 }).withMessage('Quantity must be at least 1'),
    body('totalAmount').isFloat({ min: 0 }).withMessage('Invalid total amount'),
    body('paymentId').notEmpty().withMessage('Payment ID is required'),
    body('orderId').notEmpty().withMessage('Order ID is required'),
    body('currency').isIn(['INR']).withMessage('Currency must be INR'),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }
    const { items, totalAmount, paymentId, orderId, currency } = req.body;
    try {
      const menuItems = await MenuItem.find({ _id: { $in: items.map(item => item.menuItemId) } });
      if (menuItems.length !== items.length) {
        logger.warn('One or more menu items not found', { userId: req.user.userId });
        return res.status(400).json({ error: 'One or more menu items not found' });
      }
      const calculatedTotal = items.reduce((sum, item) => {
        const menuItem = menuItems.find(mi => mi._id.toString() === item.menuItemId);
        return sum + menuItem.price * item.quantity;
      }, 0);
      if (calculatedTotal !== totalAmount) {
        logger.warn('Invalid total amount', { expected: calculatedTotal, got: totalAmount, userId: req.user.userId });
        return res.status(400).json({ error: 'Invalid total amount' });
      }
      const order = new Order({
        userId: req.user.userId,
        items,
        totalAmount,
        paymentId,
        orderId,
        currency,
        status: 'completed',
      });
      const savedOrder = await order.save();
      logger.info('Order saved', { orderId: savedOrder._id, userId: req.user.userId });
      await CartItem.deleteMany({ userId: req.user.userId });
      res.status(201).json(savedOrder);
    } catch (error) {
      logger.error('Failed to save order:', { error: error.message, userId: req.user.userId });
      res.status(500).json({ error: `Failed to save order: ${error.message}` });
    }
  }
);

// Routes
app.use('/api/menu', menuRoutes);
app.use('/api/cart', authMiddleware, cartRoutes);
app.use('/api/auth', authRoutes);

// Provide Razorpay key
app.get('/api/razorpay-key', razorpayKeyLimiter, (req, res) => {
  res.json({ keyId: process.env.RAZORPAY_KEY_ID });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  logger.info(`Server running on port ${PORT}`);
});
then i have uploadImages.js file
require('dotenv').config();
const { v2: cloudinary } = require('cloudinary');
const fs = require('fs');
const path = require('path');

// Configure Cloudinary
cloudinary.config({
  cloud_name: process.env.CLOUDINARY_CLOUD_NAME,
  api_key: process.env.CLOUDINARY_API_KEY,
  api_secret: process.env.CLOUDINARY_API_SECRET,
});

// Path to local images
const imagesDir = path.join(__dirname, '..', 'food', 'src', 'assets', 'menu');
const images = [
  'burger-11.jpg',
  'burger-12.jpg',
  'burger-13.jpg',
  'burger-14.jpg',
  'burger-15.jpg',
  'burger-16.jpg',
  'burger-17.jpg',
  'burger-18.jpg',
  'ads-1.jpg',
];

// Check if directory exists
if (!fs.existsSync(imagesDir)) {
  console.error('Error: Images directory does not exist:', imagesDir);
  process.exit(1);
}

// Check available files
const files = fs.readdirSync(imagesDir);
console.log('Files in menu directory:', files);
if (files.length === 0) {
  console.error('Error: No files found in menu directory');
  process.exit(1);
}

async function uploadImages() {
  let uploadedCount = 0;
  const errors = [];
  for (const image of images) {
    const filePath = path.join(imagesDir, image);
    if (!fs.existsSync(filePath)) {
      errors.push(`File not found: ${filePath}`);
      continue;
    }
    try {
      const result = await cloudinary.uploader.upload(filePath, {
        folder: 'menu',
        public_id: image.replace(/\.[^/.]+$/, ''),
      });
      console.log(`Uploaded ${image}: ${result.url}`);
      uploadedCount++;
    } catch (error) {
      errors.push(`Failed to upload ${image}: ${error.message}`);
    }
  }
  console.log(`Successfully uploaded ${uploadedCount} images`);
  if (errors.length > 0) {
    console.error('Errors encountered:', errors);
  }
  process.exit(errors.length > 0 ? 1 : 0);
}

uploadImages();
this is my backend code 
